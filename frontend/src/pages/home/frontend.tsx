import Text from '@/components/system/text';
import DocLink from '@/components/doc-link';
import Title from '@/components/system/title';
import ListItem from '@/components/list-item';
import SubTitle from '@/components/system/subtitle';
import Emoji, { EmojiAnimation } from '@/components/emoji';

export interface IFrontEndProps { }

export default function FrontEnd(_props: IFrontEndProps) {
    return (
        <div className="mt-10 flex flex-col items-start gap-5">
            <Title variant="h2">
                <Emoji
                    animation={EmojiAnimation.float}
                    loop
                    playOnRender
                    amplitude={0.35}
                    speed={0.6}
                    content="üñ•Ô∏è"
                />{" "}
                Frontend
            </Title>
            <div className="flex flex-col items-start gap-2">
                <SubTitle variant="h2">Context</SubTitle>
                <Text>
                    L'application est un site de diffusion d'√©v√©nements. Elle permet de
                    cr√©er des √©v√©nements et de les afficher. Elle est compos√©e de {Object.keys(Pages).length}
                    pages :
                </Text>
                <Text className="list-disc list-inside" as="ul">
                    {
                        Object.entries(Pages).map(([path, description]) => (
                            <ListItem path={path} key={path}>
                                {description}
                            </ListItem>
                        ))
                    }
                </Text>
            </div>
            <div className="flex flex-col items-start gap-2">
                <SubTitle variant="h2">Technos</SubTitle>
                <Text as="ul" className="list-disc list-inside py-1">
                    {
                        Object.entries(Technos).map(([name, { href, description }]) => (
                            <ListItem path={name} key={name}>
                                {description} <DocLink href={href} />
                            </ListItem>
                        ))
                    }
                </Text>
            </div>
            <div className="flex flex-col items-start gap-2">
                <SubTitle variant="h2">Votre t√¢che</SubTitle>
                <Text>
                    Vous devez impl√©menter la fonctionnalit√© de <b>cr√©ation d'√©v√©nement</b> √† l'application. Le formulaire doit √™tre accessible depuis la
                    page <span className="bg-slate-200 text-sm text-red-500 rounded-sm px-2 py-1 font-mono">/create</span>. Il doit permettre de cr√©er un √©v√©nement
                    avec un titre, une description, une image, une cat√©gorie, une date de d√©but et une date de fin.
                    Les champs doivent √™tre valid√©s et afficher une erreur si ils ne sont
                    pas correctement remplis. Une fois l'√©v√©nement cr√©√©, l'utilisateur doit √™tre redirig√© vers la
                    page de d√©tail de l'√©v√©nement cr√©√©.
                </Text>
                <Text>
                    La <b>liste des cat√©gories</b> est disponible depuis l'endpoint <span className="bg-slate-200 text-sm text-red-500 rounded-sm px-2 py-1 font-mono">GET /api/categories</span> du backend.
                </Text>
                <Text>
                    Cette fonctionnalit√© implique de cr√©er un endpoint <span className="bg-slate-200 text-sm text-red-500 rounded-sm px-2 py-1 font-mono">POST /api/events</span> dans le backend.
                </Text>
            </div>
        </div >
    );
}

const Pages = {
    "/": "page d'accueil du test (cette page)",
    "/list": "liste des √©v√©nements",
    "/details/:id/:slug": "d√©tail d'un √©v√©nement",
    "/create": "formulaire de cr√©ation d'√©v√©nement",
}

const Technos = {
    React: {
        href: "https://react.dev/",
        description: "librairie UI",
    },
    Tailwindcss: {
        href: "https://tailwindcss.com/",
        description: "framework CSS",
    },
    "React Router": {
        href: "https://reactrouter.com/",
        description: "librairie de routing",
    },
    "Shadcn/ui": {
        href: "https://ui.shadcn.com/",
        description: "librairie de composants",
    },
    Vite: {
        href: "https://vitejs.dev/",
        description: "module bundler",
    },
    Lucide: {
        href: "https://lucide.dev/",
        description: "librairie d'icones",
    },
}